from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.types.input_file import BufferedInputFile
from aiogram.enums import ChatAction
import keyboard as kb
from config import channel
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from prediction import predict


rt = Router()


class Form(StatesGroup):
    go = State()


@rt.callback_query(F.data == 'check_sub')
async def first_check_sub(call: CallbackQuery, bot: Bot):
    response = await sub_checker(call.message, bot)
    if response:
        await call.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!')
        await call.message.answer('–ü–æ–µ—Ö–∞–ª–∏?', reply_markup=kb.go_kb)
    else:
        await call.message.answer('–¢–µ–±–µ –≤—Å—ë –µ—â—ë –Ω–µ—Ç —É –Ω–∞—Å –Ω–∞ –∫–∞–Ω–∞–ª–µüò¢')


async def sub_checker(msg:Message, bot: Bot):
    user_channel_status = await bot.get_chat_member(chat_id=channel, user_id=msg.from_user.id)
    if user_channel_status.status == 'left':
        return False, '–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª'
    else:
        return True


@rt.callback_query(F.data == 'go')
async def first_prediction(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–¢—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–æ-–±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 17 –æ–∫—Ç—è–±—Ä—è), –∞ '
                              '—è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ–µ —Å —ç—Ç–æ–π –¥–∞—Ç–æ–πü§ó')
    await call.message.answer('–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É:')
    await state.set_state(Form.go)


@rt.message(Form.go)
async def forecast(msg: Message, bot: Bot, state: FSMContext):
    response = await sub_checker(msg, bot)
    if response:
        txt = msg.text
        try:
            if txt == '777':
                await msg.bot.send_chat_action(msg.from_user.id, action=ChatAction.UPLOAD_PHOTO)
                await msg.answer_photo(
                    BufferedInputFile(
                        await predict(txt),
                        'forecast.png'
                    )
                )
                await msg.answer(
                    '```AVTO268``` ', parse_mode='MARKDOWN', reply_markup=kb.main_kb)
            elif txt == '1 –∞–ø—Ä–µ–ª—è':
                await msg.bot.send_chat_action(msg.from_user.id, action=ChatAction.UPLOAD_PHOTO)
                await msg.answer_photo(
                    BufferedInputFile(
                        await predict(txt),
                        'forecast.png'
                    )
                )
                await msg.answer('```750at```', parse_mode='MARKDOWN', reply_markup=kb.main_kb)
            else:
                day, month = txt.split(' ')[0], txt.split(' ')[1]
                if month == '—è–Ω–≤–∞—Ä—è' and 0 < int(day) < 32:
                    await msg.bot.send_chat_action(msg.from_user.id, action=ChatAction.UPLOAD_PHOTO)
                    await msg.answer_photo(
                        BufferedInputFile(
                            await predict(txt),
                            'forecast.png'
                        ),
                        reply_markup=kb.main_kb
                    )
                else:
                    await msg.answer('–¢–µ–±–µ –ø–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —è–Ω–≤–∞—Ä—åüò¢', reply_markup=kb.main_kb)
            await state.clear()
        except:
            await msg.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑', reply_markup=ReplyKeyboardRemove())
            await state.set_state(Form.go)
    else:
        await msg.answer('–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—Å —Å–Ω–æ–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ü•∫', reply_markup=kb.check_sub_kb)

@rt.message(F.text == '–ú–Ω–µ –ø–æ–≤–µ–∑—ë—Ç!ü•≥')
async def forecast_(msg: Message, state: FSMContext):
    await msg.answer('–í–≤–µ–¥–∏ —Å–≤–æ—é —Å–∞–º—É—é —Å–æ–∫—Ä–∞–ª—å–Ω—É—é –¥–∞—Ç—ÉüîÆ:')
    await state.set_state(Form.go)
